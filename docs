<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta charset="utf-8" />
    <title>dokieli documentation</title>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="media/css/basic.css" media="all" rel="stylesheet" title="Basic" />
    <link href="media/css/do.css" media="all" rel="stylesheet" />
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" media="all" rel="stylesheet" />
    <script src="scripts/simplerdf.js"></script>
    <script src="scripts/medium-editor.min.js"></script>
    <script src="scripts/medium-editor-tables.min.js"></script>
    <script src="scripts/do.js"></script>
  </head>

  <body about="" prefix="rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs: http://www.w3.org/2000/01/rdf-schema# owl: http://www.w3.org/2002/07/owl# xsd: http://www.w3.org/2001/XMLSchema# dcterms: http://purl.org/dc/terms/ dctypes: http://purl.org/dc/dcmitype/ foaf: http://xmlns.com/foaf/0.1/ v: http://www.w3.org/2006/vcard/ns# pimspace: http://www.w3.org/ns/pim/space# cc: https://creativecommons.org/ns# skos: http://www.w3.org/2004/02/skos/core# prov: http://www.w3.org/ns/prov# qb: http://purl.org/linked-data/cube# schema: http://schema.org/ void: http://rdfs.org/ns/void# rsa: http://www.w3.org/ns/auth/rsa# cert: http://www.w3.org/ns/auth/cert# cal: http://www.w3.org/2002/12/cal/ical# wgs: http://www.w3.org/2003/01/geo/wgs84_pos# org: http://www.w3.org/ns/org# biblio: http://purl.org/net/biblio# bibo: http://purl.org/ontology/bibo/ book: http://purl.org/NET/book/vocab# ov: http://open.vocab.org/terms/ sioc: http://rdfs.org/sioc/ns# doap: http://usefulinc.com/ns/doap# dbr: http://dbpedia.org/resource/ dbp: http://dbpedia.org/property/ sio: http://semanticscience.org/resource/ opmw: http://www.opmw.org/ontology/ deo: http://purl.org/spar/deo/ doco: http://purl.org/spar/doco/ cito: http://purl.org/spar/cito/ fabio: http://purl.org/spar/fabio/ oa: http://www.w3.org/ns/oa# as: https://www.w3.org/ns/activitystreams# ldp: http://www.w3.org/ns/ldp# solid: http://www.w3.org/ns/solid/terms# acl: http://www.w3.org/ns/auth/acl# dio: https://w3id.org/dio#" typeof="schema:CreativeWork sioc:Post prov:Entity">
    <main>
      <article about="" typeof="schema:Article">
        <h1 property="schema:name">dokieli documentation</h1>

        <dl id="document-identifier">
          <dt>Identifier</dt>
          <dd><a href="https://dokie.li/docs" rel="owl:sameAs">https://dokie.li/docs</a></dd>
        </dl>

        <dl id="document-published">
          <dt>Published</dt>
          <dd><time content="2017-07-15T00:00:00Z" datatype="xsd:dateTime" datetime="2017-07-15T00:00:00Z" property="schema:datePublished">2017-07-15</time></dd>
        </dl>

        <dl id="document-modified">
          <dt>Modified</dt>
          <dd><time content="2017-07-29T00:00:00Z" datatype="xsd:dateTime" datetime="2017-07-20T00:00:00Z" property="schema:dateModified">2017-07-29</time></dd>
        </dl>

        <dl id="document-license">
          <dt>License</dt>
          <dd><a href="https://creativecommons.org/licenses/by/4.0/" rel="schema:license" title="Creative Commons Attribution 4.0 Unported">CC BY 4.0</a></dd>
        </dl>

        <div id="content">
          <section id="document-status" rel="schema:hasPart" resource="#document-status">
            <h2 about="#document-status" property="schema:name" typeof="bibo:DocumentStatus">Document Status</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>Living document.</p>
            </div>
          </section>

          <section id="abstract">
            <h2>Abstract</h2>
            <div datatype="rdf:HTML" property="schema:abstract">
              <p>This documentation is intended to help brave developers and authors. It will explain the principles behind dokieli, architectural and design patterns.</p>
            </div>
          </section>

          <section id="principles" inlist="" rel="schema:hasPart" resource="#principles">
            <h2 property="schema:name">Principles</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>Towards enabling the <em>write</em> dimension of the <em>read-write</em> Web:</p>

            </div>
          </section>

          <section id="structure-and-semantics" inlist="" rel="schema:hasPart" resource="#structure-and-semantics">
            <h2 property="schema:name">Structure and Semantics</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>This section describes dokieli's practices, and offers some guidelines for developers and authors that would like to maintain uniformity. Consumers of dokieli should not treat the information here as a profile, or as a yet another super or subset of HTML+RDFa when they author or build new functionality. Takeaway what you want, there is no lock-in here.</p>

              <p id="separation-of-concerns">dokieli adopts <cite>progressive enhancement</cite> strategy for the structural, presentational, and behavioural layers to allow content and base functionality to be accessible through different media and devices. The content in HTML+RDFa that dokieli produces <em>is</em> accessible (readable) without requiring any CSS or JavaScript, i.e. text-browser safe. Breaking this "rule" in future development should be considered an anti-pattern (or a bug) in dokieli.</p>

              <p>dokieli can serialise articles, annotations, and notifications in HTML+RDFa, Turtle, and JSON-LD, depending on server content-negotiation. Articles are represented in HTML+RDFa so that information is usable by both humans and machine consumers while maintaining lowest requirements for publishing, eg. a single URL with full payload in HTML+RDFa can be accessible from any HTTP server. No additional requirements necessary from clients (eg. JavaScript support and enabled) or servers (eg. additional RDF based content-negotiation). For annotations and notifications, dokieli first meets interoperability requirements (for protocols and vocabularies), and remains flexible about the serialisation that servers prefer. Similarly for consuming content, it can work with any of the serialisations as mentioned.</p>

              <p>dokieli initially represents <em>all</em> information with HTML+RDFa. Maintains a strong practice of having human-visible content, meanwhile keeping machine-readable data in context (eg using article's text as literal object values). This tends to avoid data duplication or data islands, which can occur when other RDF serialisations are included within HTML (eg within <code>script</code>). One exception to this "rule" is allowing authors to use the built-in <cite>Embed Data</cite> feature to include Turtle, JSON-LD, or TriG data blocks for alternative reasons.</p>


              <section id="dokieli-documents" inlist="" rel="schema:hasPart" resource="#dokieli-documents">
                <h3 property="schema:name">dokieli documents</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <p>There is no RDF class or metadata in <em>articles</em> that would indicate that it is a "dokieli" document. They would would contain classes like <samp>schema:CreativeWork sioc:Post prov:Entity schema:Article</samp> but that's not unique to dokieli (it could be any document). Since <em>Articles</em> are in HTML+RDFa, a "dokieli" document may contain a triple with an object IRI like <code>https://dokie.li/media/css/do.css</code>. Some RDFa parsers may parse the triple with <code>rel="stylesheet"</code>. HTML-only parsing may reveal more, eg. <samp>do.js</samp>.</p>

                  <p>In <em>annotations</em>, it is possible to know that the article was rendered by dokieli: <code>?s oa:renderedVia &lt;https://dokie.li/&gt;</code>), and we can assume that the annotation was created by it as well. Aside: do.css and do.js are not included in annotations.</p>

                  <p>Nothing in <em>notifications</em> would indicate that it was created by dokieli. Aside: do.css and do.js are not included in notifications.</p>
                </div>
              </section>

              <section id="html-patterns" inlist="" rel="schema:hasPart" resource="#html-patterns">
                <h3 property="schema:name">HTML patterns</h3>
                <div datatype="rdf:HTML" property="schema:description">
                  <dl>
                    <dt id="html-markup-syntax">Markup syntax</dt>
                    <dd>HTML5 <cite><a href="https://www.w3.org/TR/html-polyglot/" rel="cito:citesAsAuthority">Polyglot Markup</a></cite> is used to ensure that when content is processed or served as HTML or XHTML (<code>text/html</code>, <code>application/xhtml+xml</code>), they can generally be used in both HTML and XML ecosystems without further intervention. See also <code>getDocument</code> (do.js) for details on DOM normalisation.</dd>

                    <dt id="html-identifiers">Identifiers</dt>
                    <dd>Unique identifiers (<code>@id</code>) may be placed on any element. Identifiers are auto-generated by normalising some input eg. <code>section</code>s use their heading's text content as input, <code>table</code>s from <code>caption</code>. Anything of importance should have an identifier, and aimed to be included for common patterns out of the box. <code>@id</code> values are reused in RDFa. See also <code>generateAttributeId</code> (do.js) and its application in different places.</dd>

                    <dt id="html-embed-turtle-json-ld-trig">Embedding Turtle, JSON-LD, and TriG</dt>
                    <dd>Turtle, JSON-LD, and TriG syntaxes are placed within respective <code>script</code> blocks in <code>head</code> eg <code>&lt;script id="meta-json-ld" type="application/ld+json" title="JSON-LD"&gt;&lt;/script&gt;</code>. Data is enclosed in <code>CDATA</code> sections. This pattern is detected, visible and editable from <cite>Embed Data</cite> in dokieli menu. See also <code>showEmbedData</code> (do.js).</dd>

                    <dt id="html-css">CSS</dt>
                    <dd>Multiple stylesheets can be included with <code>@media</code>, and when accompanied with <code>@title</code>, some user-agents can provide options for the user to switch between them, as well as from the dokieli menu, eg. <pre>&lt;!-- Primary stylesheet --&gt;
<code>&lt;link href="media/css/basic.css" media="all" rel="stylesheet" title="Basic" /&gt;</code>
&lt;!-- Alternate stylesheet --&gt;
<code>&lt;link href="media/css/acm.css" media="all" rel="stylesheet alternate" title="ACM" /&gt;</code>
&lt;!-- Applied by default--&gt;
<code>&lt;link href="https://dokie.li/media/css/do.css" media="all" rel="stylesheet" /&gt;</code></pre> See also <code>showViews</code> (do.js).</dd>

                    <dt id="html-sections">Sections</dt>
                    <dd>Sectioning is declared with <code>section</code> and typically have a heading, eg <code>h2</code> as its first child. Subsections may appear as a child of parent <code>section</code>, or as a child of <code>div</code> (which is a child of parent <code>section</code>), i.e. <code>section section</code> or <code>section div section</code>. The headings of subsections are enumerated eg. <code>section h2</code> would have a subsection with <code>section h3</code>. Sections <code>id</code>s and heading text are used to dynamically build the table of contents.</dd>

                    <dt id="html-divs">Divisions</dt>
                    <dd><code>div</code>s within <code>section</code> are used to wrap a block of arbitrary markup and content. See also RDFa below.</dd>

                    <dt id="html-rdfa">RDFa</dt>
                    <dd>dokieli can consume and produce <cite><a href="https://www.w3.org/TR/rdfa-core/">RDFa Core 1.1</a></cite> syntax.</dd>
                    <dd>To preserve the order of content, <code>@inlist</code> is used eg. <code>&lt;section inlist=""</code>, <code>&lt;dd id="Sarven-Capadisli" inlist="" rel="bibo:authorList" resource="http://csarven.ca/#i"&gt;</code>.</dd>
                    <dd>A <code>section</code>s <code>@id</code> value is used as part of <code>section</code>'s <code>@resource</code> as a fragment, eg. <code>&lt;section id="introduction" rel="schema:hasPart" resource="#introduction"&gt;</code>. This allows the same identifier to be used for humans and machines, the value is derived from normalising its heading value as mentioned earlier.</dd>
                    <dd>Relating parts is done with <code>rel="schema:hasPart"</code>, eg. sections with subsection: <pre><code>&lt;section id="structure-and-semantics" inlist="" rel="schema:hasPart" resource="#structure-and-semantics"&gt;</code>
<code>  &lt;section id="html-patterns" inlist="" rel="schema:hasPart" resource="#html-patterns"&gt;</code></pre>
                    </dd>
                    <dd><code>div</code>s are used to hold a block of HTML markup and types of content together eg. <code>&lt;div datatype="rdf:HTML" property="schema:description" resource="#introduction" typeof="deo:Introduction"&gt;</code> makes it possible to declare that it contains HTML markup, and describes an introductory text.</dd>
                    <dd>Some of the prefixes (<code>@prefix</code>) on the <code>body</code> element are defined in the <cite><a href="https://www.w3.org/2011/rdfa-context/rdfa-1.1.html">RDFa Core Initial Context</a></cite>. These prefixes are defined in dokieli for the purpose of being compact, robust, and to minimise potential errors for consumers.</dd>
                  </dl>

                  <p>Article.. TODO</p>
                  <figure class="listing">
                  <pre><code>&lt;!DOCTYPE html&gt;</code>
<code>&lt;html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"&gt;</code>
<code>  &lt;head&gt;</code>
<code>    &lt;meta charset="utf-8" /&gt;</code>
<code>    &lt;title&gt;&lt;/title&gt;</code>
<code>    &lt;meta content="width=device-width, initial-scale=1" name="viewport" /&gt;</code>
<code>    &lt;link href="https://dokie.li/media/css/basic.css" media="all" rel="stylesheet" title="Basic" /&gt;</code>
<code>    &lt;link href="https://dokie.li/media/css/do.css" media="all" rel="stylesheet" /&gt;</code>
<code>    &lt;link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" media="all" rel="stylesheet" /&gt;</code>
<code>    &lt;script src="https://dokie.li/scripts/simplerdf.js"&gt;&lt;/script&gt;</code>
<code>    &lt;script src="https://dokie.li/scripts/medium-editor.min.js"&gt;&lt;/script&gt;</code>
<code>    &lt;script src="https://dokie.li/scripts/do.js"&gt;&lt;/script&gt;</code>
<code>  &lt;/head&gt;</code>
<code></code>
<code>  &lt;body about="" prefix="rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# rdfs: http://www.w3.org/2000/01/rdf-schema# owl: http://www.w3.org/2002/07/owl# xsd: http://www.w3.org/2001/XMLSchema# dcterms: http://purl.org/dc/terms/ dctypes: http://purl.org/dc/dcmitype/ foaf: http://xmlns.com/foaf/0.1/ pimspace: http://www.w3.org/ns/pim/space# cc: https://creativecommons.org/ns# skos: http://www.w3.org/2004/02/skos/core# prov: http://www.w3.org/ns/prov# qb: http://purl.org/linked-data/cube# schema: http://schema.org/ void: http://rdfs.org/ns/void# rsa: http://www.w3.org/ns/auth/rsa# cert: http://www.w3.org/ns/auth/cert# wgs: http://www.w3.org/2003/01/geo/wgs84_pos# bibo: http://purl.org/ontology/bibo/ sioc: http://rdfs.org/sioc/ns# doap: http://usefulinc.com/ns/doap# dbr: http://dbpedia.org/resource/ dbp: http://dbpedia.org/property/ sio: http://semanticscience.org/resource/ opmw: http://www.opmw.org/ontology/ deo: http://purl.org/spar/deo/ doco: http://purl.org/spar/doco/ cito: http://purl.org/spar/cito/ fabio: http://purl.org/spar/fabio/ oa: http://www.w3.org/ns/oa# as: https://www.w3.org/ns/activitystreams# ldp: http://www.w3.org/ns/ldp# solid: http://www.w3.org/ns/solid/terms# acl: http://www.w3.org/ns/auth/acl# dio: https://w3id.org/dio#" typeof="schema:CreativeWork sioc:Post prov:Entity"&gt;</code>
<code>    &lt;main&gt;</code>
<code>      &lt;article about="" typeof="schema:Article"&gt;</code>
<code></code>
<code>      &lt;/article&gt;</code>
<code>    &lt;/main&gt;</code>
<code></code>
<code>  &lt;/body&gt;</code>
<code>&lt;/html&gt;</code></pre>
                    <figcaption>Article HTML template</figcaption>
                  </figure>

                  <aside>
                    <p>Future HTML template will only require do.css and do.js</p>
                  </aside>


                  <p>Annotation:</p>
<pre>
</pre>

                  <p>Notification:</p>
<pre></pre>


                </div>
              </section>
            </div>
          </section>

          <section id="http-operations" inlist="" rel="schema:hasPart" resource="#http-operations">
            <h2 property="schema:name">HTTP operations</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p id="http-put">dokieli conforms to <cite><a href="https://www.w3.org/TR/ldp/" rel="cito:citesAsAuthority">Linked Data Platform</a></cite> (LDP) protocol for create, update, and dete operations.</p>

              <p>Article operations like <cite>New</cite>, <cite>Save</cite>, <cite>Save As</cite>  <cite>Reply</cite> and <cite>Review</cite> and other annotation operations use <code>HTTP PUT</code>. Notifications are sent with <code>HTTP POST</code>. <cite>Save</cite> and <cite>Save As</cite> normalises the HTML before sending.</p>

              <aside id="http-patch">
                <p>Reasons for using <code>HTTP POST</code> and <code>PUT</code> instead of <code>PATCH</code>:</p>

                <ul>
                  <li>Servers with <cite><a href="https://tools.ietf.org/html/rfc5261" rel="cito:citesAsAuthority">XML Patch</a></cite> and mediatype <code>application/xml-patch+xml</code> (<cite><a href="https://tools.ietf.org/html/rfc7351" rel="cito:citesAsAuthority">RFC 7351</a></cite>) capability in the Linked Data ecosystem are not well supported.</li>

                  <li><code>HTTP PATCH</code> with <cite><a href="https://www.w3.org/TR/sparql11-update/" rel="cito:citesAsAuthority">SPARQL Update</a></cite> (using mediatype <code>application/sparql-update</code>) would not work for RDFa representations because it would require additional server-side knowledge: HTML+RDFa serializer. This also makes server implementations a dependency for dokieli which is an undesirable design pattern.</li>

                  <li><code>HTTP PATCH</code> can help to optimise HTTP requests provided that the server processes the SPARQL query and eventually publishes the final state of the article. dokieli's use of <code>HTTP POST</code> and <code>HTTP PUT</code> on the other hand does not expect or impose operations other than to store and serve the article. If servers would like to do versioning and how, dokieli leaves it to the servers to decide.</li>
                </ul>
              </aside>

            </div>
          </section>

          <section id="web-extension" inlist="" rel="schema:hasPart" resource="#web-extension">
            <h2 property="schema:name">Web Extension</h2>
            <div datatype="rdf:HTML" property="schema:description">
              <p>The dokieli <cite>Web Extension</cite> is a minimal package of dokieli which contains the core CSS and JavaScript that works as a browser add-on. When user triggers it from their browser toolbar, it provides the same functionality as a <cite>single-page application</cite>, i.e. initialised and rendered in the browser DOM. Currently the extension works with Firefox and Chrome/Chromium browsers. For Firefox, the extension can be packaged with <samp>xpi-pack</samp> and imported from the <cite>Add-ons Manager</cite>. For Chrome/Chromium, the directory can be imported from <cite>Extensions</cite> (developer mode). Alternatively, the extensions are available from <cite><a href="https://addons.mozilla.org/en-US/firefox/addon/dokieli/">Add-ons for Firefox</a></cite> and <cite><a href="https://chrome.google.com/webstore/detail/ddmhaonbhodhgkaljpjlglodncddalid">Chrome Web Store</a></cite>.</p>
            </div>
          </section>

        </div>
      </article>
    </main>
  </body>
</html>
